#!/bin/zsh
# ~/.zshrc - Main ZSH configuration file

# ============================================================================
# TABLE OF CONTENTS - Use Cmd+F to jump to sections
# ============================================================================
# CURSOR TERMINAL COMPATIBILITY
# ENVIRONMENT VARIABLES AND EXPORTS  
# OH MY ZSH CONFIGURATION
# CUSTOM FUNCTIONS
# ALIASES
# TOOL COMPLETIONS AND INITIALIZATIONS
# LOCAL CONFIGURATION

# ============================================================================
# CURSOR TERMINAL COMPATIBILITY
# ============================================================================
# Cursor terminal compatibility fix
# https://forum.cursor.com/t/cursor-agent-mode-when-running-terminal-commands-often-hangs-up-the-terminal-requiring-a-click-to-pop-it-out-in-order-to-continue-commands/59969/16

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Fix Cursor terminal compatibility: https://forum.cursor.com/t/cursor-agent-terminal-doesn-t-work-well-with-powerlevel10k-oh-my-zsh/96808/12
if [[ -n $CURSOR_TRACE_ID ]]; then
  PROMPT_EOL_MARK=""
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
  precmd() { print -Pn "\e]133;D;%?\a" }
  preexec() { print -Pn "\e]133;C;\a" }
fi

# ============================================================================
# ENVIRONMENT VARIABLES AND EXPORTS
# ============================================================================

# Oh My Zsh Configuration
export ZSH="$HOME/.oh-my-zsh"

# Editor
export EDITOR="cursor --wait"

# Git
export GITHUB_USERNAME="treygilliland"

# Core Repository Path
export CORE_DIR="~/binit/code/core"

# Android Development
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools

# C/C++ Compiler Configuration
export CC=/opt/homebrew/opt/llvm/bin/clang
export CXX=/opt/homebrew/opt/llvm/bin/clang++

# Additional PATH exports
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.jenv/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"

# Tool initialization
# Homebrew (Linuxbrew)
if [[ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# Atuin (shell history)
if command -v atuin &> /dev/null; then
  eval "$(atuin init zsh)"
fi

# Directory hashing for quick navigation
hash -d c=$HOME/binit/code/core
hash -d code=$HOME/code

# Auto CD configuration
setopt auto_cd
cdpath=(
    $HOME/binit/code/
    $HOME/binit/code/core/controlunit
    $HOME
)

# ============================================================================
# OH MY ZSH CONFIGURATION
# ============================================================================

# Set Oh My Zsh theme conditionally based on OS
if [[ "$OSTYPE" == "darwin"* ]]; then
  ZSH_THEME="powerlevel10k/powerlevel10k"  # Use Powerlevel10k on macOS
else
  ZSH_THEME="robbyrussell"  # Use robbyrussell on Linux and other systems
fi

# Oh My Zsh plugins
plugins=(
    git
    zsh-autosuggestions
)

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# Prompt configuration for Cursor/VSCode
# if [[ "$TERM_PROGRAM" == "vscode" ]]; then
#   PROMPT='%n@%m:%~%# '
#   RPROMPT=''
# else
#   [[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
# fi
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

# ============================================================================
# CUSTOM FUNCTIONS
# ============================================================================

# Docker utility functions
removecontainers() {
    docker stop $(docker ps -aq)
    docker rm $(docker ps -aq)
}

armageddon() {
    removecontainers
    docker network prune -f
    docker rmi -f $(docker images --filter dangling=true -qa)
    docker volume rm $(docker volume ls --filter dangling=true -q)
    docker rmi -f $(docker images -qa)
    docker system prune --all --volumes --force && docker volume prune --all --force
}

# Yazi file manager with directory changing support
y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    IFS= read -r -d '' cwd < "$tmp"
    [ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
    rm -f -- "$tmp"
}

# ============================================================================
# ALIASES
# ============================================================================

# Shell and Config Management
alias bashrc="code ~/.bashrc"
alias srcbash="source ~/.bashrc"
alias zshrc="code ~/.zshrc"
alias srczsh="source ~/.zshrc"
alias src="srczsh"
alias rc="zshrc"
alias coderc='code ~/Library/Application Support/Cursor/User/settings.json'

# Config Files
alias srctmux="tmux source-file ~/.config/tmux/.tmux.conf"
alias tmux-config="code ~/.config/tmux/.tmux.conf"
alias p10k-config="code ~/.p10k.zsh"
alias zellij-config="code ~/.config/zellij/config.kdl"

# Docker
alias d="docker"
alias dcu='docker compose up'
alias ddf='docker system df'
alias lzd='lazydocker'

# Python
alias activate='source .venv/bin/activate'

# Node/NPM
alias npm="npm"
alias n="npm"
alias p="pnpm"
alias nrd="npm run dev"
alias nrt="npm run test"
alias nrs="npm run start"
alias nrb="npm run build"
alias nr="npm run "

# Homebrew
alias bu="brew update && brew upgrade && brew cleanup"
alias bi="brew install "
alias bui="brew uninstall "

# Git (supplementing oh-my-zsh git plugin)
alias galias="alias | grep git"
alias lg="lazygit"
alias cb="git branch --show-current"
alias gplo="git pull origin "
alias gplocb='git pull origin $(git branch --show-current)'
alias gpso="git push origin "
alias gpsocb='git push origin $(git branch --show-current)'
alias gau="git add -u"
alias gcm="git commit -m "
alias gs="git status"
alias gco="git checkout "
alias gcom="git checkout main"
alias groot='cd $(git rev-parse --show-toplevel)'
alias gwt="git worktree"
alias pwb="git branch --show-current"

# Graphite
alias gtc="gt create -m"
alias gtcm="gt create -m"
alias gtm="gt modify"
alias gtmc="gt modify --commit"
alias gtsync="gt sync"
alias gts="gt submit"
alias gtr="gt restack"
alias gtp="gt sync"

# Core Repository Navigation
alias coredev="zellij --layout ~/.config/zellij/layouts/core.kdl"
alias core="cd $CORE_DIR"
alias sd="cd $CORE_DIR/controlunit/stopdetection"
alias fdr="cd $CORE_DIR/controlunit/framedriver"
alias triton="cd $CORE_DIR/controlunit/triton"
alias fu="cd $CORE_DIR/controlunit/fileuploader"
alias ch="cd $CORE_DIR/dbt/clickhouse"
alias pipe="cd $CORE_DIR/lib/python/pipelines"
alias cli='uv run $(git rev-parse --show-toplevel)/cli/main.py'
alias dcli='PLATFORM=linux/amd64 $(git rev-parse --show-toplevel)/dcli.sh'

# Applications
alias code=cursor
alias vlc='/Applications/VLC.app/Contents/MacOS/VLC -I rc'

# Chrome Profiles
alias chrome-school='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --profile-directory="Default"'
alias chrome-personal='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --profile-directory="Profile 1"'
alias chrome-work='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --profile-directory="Profile 2"'

# Google Cloud
alias gcloud-auth-logout="gcloud auth revoke --all && gcloud auth application-default revoke"

# System Tools
alias ports='lsof -nP -iTCP -sTCP:LISTEN'

# C/C++ Development
alias cmake="cmake -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX"

# Chezmoi dotfiles
alias dot="chezmoi"

# ============================================================================
# TOOL COMPLETIONS AND INITIALIZATIONS
# ============================================================================

# 1Password CLI
if command -v op &> /dev/null; then
  eval "$(op completion zsh)"; compdef _op op
fi

# UV Python package manager
if command -v uv &> /dev/null; then
  eval "$(uv generate-shell-completion zsh)"
fi
if command -v uvx &> /dev/null; then
  eval "$(uvx --generate-shell-completion zsh)"
fi

# Google Cloud SDK (check both macOS and Linux paths)
if [[ -f "/opt/homebrew/share/google-cloud-sdk/completion.zsh.inc" ]]; then
  source "/opt/homebrew/share/google-cloud-sdk/completion.zsh.inc"
  source "/opt/homebrew/share/google-cloud-sdk/path.zsh.inc"
elif [[ -f "/home/linuxbrew/.linuxbrew/share/google-cloud-sdk/completion.zsh.inc" ]]; then
  source "/home/linuxbrew/.linuxbrew/share/google-cloud-sdk/completion.zsh.inc"
  source "/home/linuxbrew/.linuxbrew/share/google-cloud-sdk/path.zsh.inc"
fi

# TheFuck command corrector
if command -v thefuck &> /dev/null; then
  eval $(thefuck --alias)
fi

# Mise development tool version manager
if command -v mise &> /dev/null; then
  eval "$(mise activate zsh)"
fi

# Zoxide (better cd)
if command -v zoxide &> /dev/null; then
  eval "$(zoxide init --cmd cd zsh)"
fi

# Java environment manager
if command -v jenv &> /dev/null; then
  eval "$(jenv init -)"
fi

# ZSH syntax highlighting (should be last)
# Check both macOS and Linux paths
if [[ -f /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
    source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [[ -f /home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
    source /home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# ZSH auto completion setup
autoload -Uz compinit
zstyle ':completion:*' menu select
fpath+=~/.zfunc

# Graphite completion
#compdef gt
###-begin-gt-completions-###
#
# yargs command completion script
#
# Installation: gt completion >> ~/.zshrc
#    or gt completion >> ~/.zprofile on OSX.
#
_gt_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" gt --get-yargs-completions "${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _gt_yargs_completions gt
###-end-gt-completions-###

# ============================================================================
# LOCAL CONFIGURATION
# ============================================================================

# Local/machine-specific configuration (not tracked by chezmoi)
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local
